<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ubuntu 下基于Snort的入侵检测系统的搭建</title>
    <url>/2019/07/20/snort/</url>
    <content><![CDATA[<h1 id="Ubuntu-下基于Snort的入侵检测系统的搭建"><a href="#Ubuntu-下基于Snort的入侵检测系统的搭建" class="headerlink" title="Ubuntu 下基于Snort的入侵检测系统的搭建"></a>Ubuntu 下基于Snort的入侵检测系统的搭建</h1><h2 id="Snort概览"><a href="#Snort概览" class="headerlink" title="Snort概览"></a>Snort概览</h2><p>Snort IDS（入侵检测系统）是一个强大的网络入侵检测系统。它具有实时数据流量分析和记录IP网络数据包的能力，能够进行协议分析，对网络数据包内容进行搜索、匹配。它能够检测各种不同的攻击方式，对攻击进行实时报警。此外，Snort是开源的入侵检测系统，并具有很好的扩展性和可移植性。</p>
<p>snort官网：<a href="https://www.snort.org/" target="_blank" rel="noopener">https://www.snort.org/</a></p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>snort官网有很多教程，官方使用手册，不同平台的安装教程，等其他由snort社区成员编写的很多教程，都非常的详细，是非常好的参考资料，不过都是英文的。</p>
<a id="more"></a>
<p><img src="https://raw.githubusercontent.com/hanming215/ImageRepo/master/blog/20190719234643.jpg" alt=""></p>
<p>详见：<a href="https://www.snort.org/documents" target="_blank" rel="noopener">https://www.snort.org/documents</a></p>
<h2 id="安装案例"><a href="#安装案例" class="headerlink" title="安装案例"></a>安装案例</h2><p>Ubuntu 16.04下snort+barnyard2+base的入侵检测系统的搭建</p>
<p><strong>安装教程</strong></p>
<p><img src="https://raw.githubusercontent.com/hanming215/ImageRepo/master/blog/20190720001200.png" alt=""></p>
<p>作者博客：<a href="http://sublimerobots.com/" target="_blank" rel="noopener">http://sublimerobots.com/</a></p>
<p><strong>Snort</strong>：检测攻击</p>
<blockquote>
<p>Snort可以以人类可读模式将事件写入控制台或文本文件，但是比较耗费资源，效率不高，影响Snort性能。</p>
</blockquote>
<p><strong>Barnyard2</strong>：将告警信息保存到数据库</p>
<blockquote>
<p>Barnyard2是一个用于Snort unified2二进制输出文件的开源解释器，<a href="https://github.com/firnsy/barnyard2" target="_blank" rel="noopener">https://github.com/firnsy/barnyard2</a></p>
<p>将Snort事件存储在MySQL数据库中，这样我们就可以查看、搜索和查找事件。</p>
<p>为了有效地将Snort事件放入MySQL数据库，减少Snort的负载。可以使用Barnyard2。配置Snort将事件以二进制形式输出到一个文件夹中，然后让Barnyard2异步读取这些事件并将它们添加到MySQL数据库中。</p>
</blockquote>
<p><strong>BASE</strong>：<strong>snort</strong>的<strong>Web GUI</strong>，以图形界面查看告警信息更加利于对攻击分析和统计</p>
<blockquote>
<p>BASE（Basic Analysis and Security Engine ）是一个用于Snort的简单web GUI。替代产品包括Snorby、Splunk、Sguil、AlienVault OSSIM和任何syslog服务器。</p>
<p>之所以选择在本指南中使用BASE，是因为它设置简单，使用简单。BASE和Snorby都是废弃的项目，虽然Snorby提供了一个很好的Web-2.0接口，但由于它是用Ruby on Rails编写的，它所依赖的Ruby软件包不断升级，这导致了与其他所需Snorby软件包的兼容性问题，从而导致安装问题过多。</p>
</blockquote>
<p>界面如下：</p>
<p><img src="https://raw.githubusercontent.com/hanming215/ImageRepo/master/blog/20190720002416.png" alt=""></p>
]]></content>
      <categories>
        <category>教程</category>
        <category>snort</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>博客</tag>
        <tag>snort</tag>
        <tag>入侵检测</tag>
      </tags>
  </entry>
  <entry>
    <title>使用PicGo和Github搭建个人图床</title>
    <url>/2019/07/17/%E4%BD%BF%E7%94%A8PicGo%E5%92%8CGithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h1 id="使用PicGo和Github搭建个人图床"><a href="#使用PicGo和Github搭建个人图床" class="headerlink" title="使用PicGo和Github搭建个人图床"></a>使用PicGo和Github搭建个人图床</h1><h2 id="Github设置"><a href="#Github设置" class="headerlink" title="Github设置"></a>Github设置</h2><ol>
<li><p>注册github账号，新建一个保存图片的仓库</p>
</li>
<li><p>生成一个token用于PicGo操作你的仓库</p>
</li>
<li><p>在github-&gt;setting-&gt;developer settings 选择generate new token</p>
<p>或直接访问：<a href="https://github.com/settings/tokens" target="_blank" rel="noopener">https://github.com/settings/tokens</a></p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/hanming215/ImageRepo/master/blog/20190717072230.png" alt=""></p>
<p>​        把repo的勾打上即可。然后翻到页面最底部，点击<code>Generate token</code>的绿色按钮生成token。</p>
<a id="more"></a>

<p><img src="https://raw.githubusercontent.com/hanming215/ImageRepo/master/blog/20190717072411.png" alt=""></p>
<p>​    <strong>注意：</strong>这个token生成后只会显示一次！你要把这个token复制一下存到其他地方以备以后要用。</p>
<h2 id="配置PicGo"><a href="#配置PicGo" class="headerlink" title="配置PicGo"></a>配置PicGo</h2><ol>
<li><p>下载安装对应版本的PicGo</p>
<p>下载地址：<a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo/releases</a></p>
</li>
<li><p>设置PicGO</p>
<p>仓库名的格式是<code>用户名/仓库</code>，比如我创建了一个叫做<code>test</code>的仓库，在PicGo里我要设定的仓库名就是<code>用户名/test</code>。一般我们选择<code>master</code>分支即可，然后粘贴Github生成的token。也可以在仓库下指定<code>blog</code>路径，PicGo可以自动新建<code>blog</code>目录，然后记得点击确定以生效，然后可以点击设为默认图床来确保上传的图床是GitHub。</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/hanming215/ImageRepo/master/blog/20190717073716.png" alt=""></p>
<p>当你上传的时候，你会发现你的仓库里也会增加新的图片了，图片链接自动保存在剪贴板，粘贴即可使用。</p>
<p><img src="https://raw.githubusercontent.com/hanming215/ImageRepo/master/blog/20190717074533.png" alt=""></p>
]]></content>
      <tags>
        <tag>教程</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建</title>
    <url>/2019/07/15/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h1><ol>
<li><p>安装 Node</p>
</li>
<li><p>安装 Git</p>
</li>
<li><p>安装 Hexo</p>
</li>
</ol>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
<p>出现下图表示安装成功</p>


<p><img src="D:%5Chexo-blog%5Csource_posts%5CHexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%5C1.jpg" alt="1"></p>
<h1 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h1><h2 id="初始化-hexo"><a href="#初始化-hexo" class="headerlink" title="初始化 hexo"></a>初始化 hexo</h2><ul>
<li><p>新建一个空白文件夹（下文提到的“项目根目录”是指你新建的文件夹的位置）用于存放 hexo 资源。在空白文件夹里面打开 Git Bash ，输入下列命令行进行初始化，初始化成功后会在文件夹生成如下图的文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><img src="Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/2.jpg" alt=""></p>



<p><img src="D:%5Chexo-blog%5Csource_posts%5CHexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%5C3.jpg" alt="3"></p>
<h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>打开Next主题路径下的配置文件<code>_config.yml</code>修改下列代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># Canvas-nest</span><br><span class="line"></span><br><span class="line"># Dependencies: https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;theme-next-canvas-nest</span><br><span class="line"># For more information: https:&#x2F;&#x2F;github.com&#x2F;hustcc&#x2F;canvas-nest.js</span><br><span class="line">canvas_nest:</span><br><span class="line">  enable: true</span><br><span class="line">  onmobile: true # Display on mobile or not</span><br><span class="line">  color: &quot;0,0,255&quot; # RGB values, use &#96;,&#96; to separate</span><br><span class="line">  opacity: 0.5 # The opacity of line: 0~1</span><br><span class="line">  zIndex: -1 # z-index property of the background</span><br><span class="line">  count: 99 # The number of lines</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>教程</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>安装hexo</title>
    <url>/2019/07/14/%E5%AE%89%E8%A3%85hexo/</url>
    <content><![CDATA[<h1 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h1><ol>
<li>安装 Node</li>
<li>安装 Git</li>
<li>注册github</li>
<li>安装 Hexo</li>
</ol>
<a id="more"></a>

<ol>
<li><p><strong>注</strong>：</p>
<ul>
<li><p>hexo相关命令均在<strong>站点目录</strong>下，用<strong>Git Bash</strong>运行。</p>
</li>
<li><p>站点配置文件：站点目录下的<code>_config.yml</code>。</p>
<p> 路径为<code>&lt;folder&gt;\_config.yml</code></p>
</li>
<li><p>主题配置文件：站点目录下的<code>themes</code>文件夹下的，主题文件夹下的<code>_config.yml</code>。</p>
<p> 路径为<code>&lt;folder&gt;\themes\&lt;主题文件夹&gt;\_config.yml</code></p>
</li>
</ul>
</li>
<li><p>启动服务器。在路径下，命令行（即Git Bash）输入以下命令，运行即可：</p>
<blockquote>
<p>hexo server</p>
</blockquote>
</li>
<li><p>浏览器访问网址： <code>http://localhost:4000/</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
