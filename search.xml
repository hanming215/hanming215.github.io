<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo博客搭建之SEO搜索优化</title>
    <url>/posts/a3618c50.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>SEO是（Search Engine Optimization）是搜索引擎优化的英文缩写。大家可以自行学习它的原理及作用。blog小白的我唯一知道的就是当用户根据关键词搜索的时候，搜索到的结果最先看到的是我们的网页，这就是seo要做的事。</p>
<h1 id="增加sitemap（站点地图）"><a href="#增加sitemap（站点地图）" class="headerlink" title="增加sitemap（站点地图）"></a>增加sitemap（站点地图）</h1><p>进入博客根目录，执行下面的命令，安装2个插件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>

<p>在博客根目录的_config.yml配置文件种添加一下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 自动生成sitemap</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>一定要修改<code>_config.yml</code>中的默认的URL地址<code>http://yoursite.com</code>，把URL地址修改成你的网站地址，如<code>https://xxxxxx.github.io/</code>。配置完之后执行<code>hexo g</code>就会在你的博客的目录<code>public</code>,生成相对应的<code>sitemap</code>文件。不改的话生成的<code>sitemap.xml</code>和<code>baidusitemap.xml</code>中的内容就会是下面这种，还是默认的URL地址。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">urlset</span> <span class="attr">xmlns</span>=<span class="string">"http://www.sitemaps.org/schemas/sitemap/0.9"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loc</span>&gt;</span>http://yoursite.com/posts/...html<span class="tag">&lt;/<span class="name">loc</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">lastmod</span>&gt;</span>2020-03-30<span class="tag">&lt;/<span class="name">lastmod</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">url</span>&gt;</span>  <span class="tag">&lt;<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loc</span>&gt;</span>http://yoursite.com/posts/....html<span class="tag">&lt;/<span class="name">loc</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">lastmod</span>&gt;</span>2020-03-29<span class="tag">&lt;/<span class="name">lastmod</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">url</span>&gt;</span>  </span><br><span class="line">	...</span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">urlset</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="百度收录"><a href="#百度收录" class="headerlink" title="百度收录"></a>百度收录</h1><p>据说百度不能Github的内容。以后购买了域名，有时间再写吧。</p>
<p>＾_＾ （绝对不是因为懒……</p>
<h1 id="谷歌收录"><a href="#谷歌收录" class="headerlink" title="谷歌收录"></a>谷歌收录</h1><p>登录 <a href="https://search.google.com/search-console/welcome?hl=zh-CN" target="_blank" rel="noopener">Google Search Console</a>，点击添加资源，输入自己的域名，按提示操作。</p>
<p><img src="/images/hexo/google.jpg" alt="修改"></p>
<p>总共有几种验证方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- Domain 网域验证</span><br><span class="line">- URL prefix 网址前缀验证，包含以下验证方法：</span><br><span class="line">  - HTML file（文件验证）</span><br><span class="line">  - HTML taghtml（标记验证）</span><br><span class="line">  - Google Analytics</span><br><span class="line">  - Google Tag Manager</span><br><span class="line">  - Google name provider</span><br></pre></td></tr></table></figure>

<p>网域方式需要通过 DNS 记录验证域名所有权。我没有购买域名，选择了网址前缀方式中的html标记验证。Google的提示：复制下面的元标记，并将其粘贴至您网站的首页中。它应该位于第一个<code>&lt;body&gt;</code>部分之前的<code>&lt;head&gt;</code>部分中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"google-site-verification"</span> <span class="attr">content</span>=<span class="string">"......"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>根据主题不同，复制到<code>主题/layout/_partial/head/head.swig</code>中。</p>
<p>NexT主题已经加入了代码模板了，因此只需要修改<strong>主题的配置文件</strong>中<code>google_site_verification</code>。可以看见还有其他站点的<code>verification</code>，根据需要添加。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Google Webmaster tools verification.</span><br><span class="line"># See: https:&#x2F;&#x2F;www.google.com&#x2F;webmasters</span><br><span class="line">google_site_verification:</span><br></pre></td></tr></table></figure>

<p>添加后用<code>hexo d</code>部署，<strong>部署成功后进行验证。</strong></p>
<p>打开 <a href="https://search.google.com/search-console/" target="_blank" rel="noopener">Google search console</a>，点击左侧的站点地图栏，在添加新的站点地图下面添加，如<code>https://xxx.github.io/sitemap.xml</code>。</p>
<p>配置完成后<strong>第二天</strong>就可以在Google搜索自己的关键词和title测试一下咯，如：<code>site:xxx.github.io</code>来检查是否收录成功。</p>
<h1 id="添加-robots-txt"><a href="#添加-robots-txt" class="headerlink" title="添加 robots.txt"></a>添加 robots.txt</h1><p><code>/source</code>中新建一个<code>robots.txt</code>，这个是<strong>Robots协议</strong>的文件，告诉引擎哪些要收录，哪些禁止收录。内容可以参考一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Allow: &#x2F;</span><br><span class="line">categories&#x2F;</span><br><span class="line">Allow: &#x2F;tags&#x2F;</span><br><span class="line">Allow: &#x2F;archives&#x2F;</span><br><span class="line"></span><br><span class="line">Disallow: &#x2F;js&#x2F;</span><br><span class="line">Disallow: &#x2F;css&#x2F;</span><br><span class="line">Disallow: &#x2F;fonts&#x2F;</span><br><span class="line"></span><br><span class="line">Sitemap: https:&#x2F;&#x2F;xxxxxx.github.io&#x2F;sitemap.xml</span><br><span class="line">Sitemap: https:&#x2F;&#x2F;xxxxxx.github.io&#x2F;baidusitemap.xml</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>SEO</tag>
        <tag>搜索优化</tag>
      </tags>
  </entry>
  <entry>
    <title>路由器进阶使用之虚拟服务器(端口映射)</title>
    <url>/posts/525a23b3.html</url>
    <content><![CDATA[<h1 id="0x01-写在开头"><a href="#0x01-写在开头" class="headerlink" title="0x01 写在开头"></a>0x01 写在开头</h1><p>本教程是开启路由器的端口映射，TP<em>-</em>LINK路由器中称此为虚拟服务器，所以本文以“虚拟服务器”为主。但是本教程错误的，准确来说是不完整的。</p>
<h2 id="错误理解"><a href="#错误理解" class="headerlink" title="错误理解"></a>错误理解</h2><p>原本以为，路由器拨号后获得了公网IP地址，然后开启路由器的虚拟服务器，访问路由器WAN口IP地址，就可以成功访问到内网的服务。心想原来也没有那么南嘛，还有点高兴。结果发现我能通过WAN口IP地址访问内网，是因为我连自己的路由器。猜测原理是访问WAN口IP，数据包都没有被转发出去，直接被路由器转发回来了。综上，现在路由器拨号获取的不是公网IP，并不能访问内网服务。失望是不可能失望的，只能安慰一下自己又学到了知识的样子 (┬_┬) 。</p>
<h2 id="错误发现过程"><a href="#错误发现过程" class="headerlink" title="错误发现过程"></a>错误发现过程</h2><p>在使用中发现上网设备的公网IP与路由器拨号得到的WAN口IP地址不一样，WAN口IP地址是100.64.*.*，开始到没觉得有什么，不知道这是一个保留地址。在设置DDNS（Dynamic Domain Name Server，动态域名服务）时才发现不能凭借域名访问内网，然后才发现WAN口IP不是公网IP。通过查找资料才明白，我们自己的路由器或者电脑拨号连接到了电信运营商的“大路由器”上，而不是公网IP地址，所以不能通过外网访问内网的服务。</p>
<a id="more"></a>

<blockquote>
<p>耍了个小聪明，瞎尝试了一下。既然是我家是电信的网，连接邻居家的电信宽带和电信流量上网都试了一下，都不能访问，看来是失败了。要使用公网IP的话，应该要向运营商申请，以后有时间，尝试一下。</p>
</blockquote>
<p>通过IP查询网站 <a href="https://www.ip138.com/" target="_blank" rel="noopener">https://www.ip138.com/</a> ，查看WAN口IP地址，结果为运营商局域网IP地址。</p>
<p><img src="/images/router/%E4%BF%9D%E7%95%99%E5%9C%B0%E5%9D%80.jpg" alt="保留地址"></p>
<p>借用网友的回答：</p>
<blockquote>
<p>实际上，你的网络是这个结构：<br>internet &lt;=&gt; <strong>运营商路由器</strong> &lt;=&gt; 你的路由器 &lt;=&gt; 你的电脑。<br>两层路由，你的路由器看到的 IP 是运营商分配给你的运营商局域网 IP，并非公网 IP。</p>
</blockquote>
<p>计算机网络知识没学好，被骗的好惨。参考资料：</p>
<p><a href="https://blog.csdn.net/achejq/article/details/51943080" target="_blank" rel="noopener">https://blog.csdn.net/achejq/article/details/51943080</a></p>
<p><a href="https://www.zhihu.com/question/20889036" target="_blank" rel="noopener">https://www.zhihu.com/question/20889036</a></p>
<h1 id="0x02-不完整教程"><a href="#0x02-不完整教程" class="headerlink" title="0x02 不完整教程"></a>0x02 不完整教程</h1><p><del>前面写的文章讲述了如何修改光猫为桥接，让路由器拨号。路由器拨号后WAN口IP地址是公网IP地址，而不是光猫分配的内网IP，就可以将自己内网的一些服务发布到公网上去，让连接互联网的用户直接可以访问内部网络的服务。这里使用的是TP<em>-</em>LINK的TL-WDR5620路由器中的虚拟服务器，瞎鼓捣一番。这个公网IP应该是不固定的，如果要进一步使用，应该向运营商申请。</del></p>
<h2 id="开启本机服务"><a href="#开启本机服务" class="headerlink" title="开启本机服务"></a>开启本机服务</h2><p>这里以Hexo的本地服务为例，通过命令<code>hexo server</code>，快速开启一个内网服务。可以通过 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 访问，端口号为4000。</p>
<h2 id="开启虚拟服务器"><a href="#开启虚拟服务器" class="headerlink" title="开启虚拟服务器"></a>开启虚拟服务器</h2><p>在路由器中的虚拟服务器功能添加一项内容。借用TP<em>-</em>LINK官网的图，各个参数的含义如下：</p>
<p><img src="/images/router/%E5%8F%82%E6%95%B0%E8%A7%A3%E9%87%8A.png" alt="参数"></p>
<p>外部端口与Hexo端口设为一样，都是4000，也可以不一样，只是在外网访问的时候，需要填外部端口地址。IP地址为的路由器分配给运行Hexo服务的计算机的IP地址。</p>
<p><img src="/images/router/%E8%99%9A%E6%8B%9F%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B7%BB%E5%8A%A0.jpg" alt="参数"></p>
<p>最后关闭防火墙及杀毒软件，通过访问WAN口IP地址:端口号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;100.64.*.*:4000</span><br></pre></td></tr></table></figure>

<p>成功访问。</p>
<h1 id="0x03-最后"><a href="#0x03-最后" class="headerlink" title="0x03 最后"></a>0x03 最后</h1><p>貌似可以通过DDNS内网穿透解决方案来解决内网IP地址问题，参考 <a href="https://hsk.oray.com/news/4326.html" target="_blank" rel="noopener">https://hsk.oray.com/news/4326.html</a></p>
<p>路由器还有很多高级功能，以后有时间接着更新……</p>
<h2 id="官网教程参考"><a href="#官网教程参考" class="headerlink" title="官网教程参考"></a>官网教程参考</h2><p>TP<em>-</em>LINK教程参考</p>
<p>[TL-WDR5600千兆版] 映射服务器到外网</p>
<p><a href="https://service.tp-link.com.cn/detail_article_3606.html" target="_blank" rel="noopener">https://service.tp-link.com.cn/detail_article_3606.html</a></p>
<p>设置了虚拟服务器，外网无法访问服务器怎么办？</p>
<p><a href="https://service.tp-link.com.cn/detail_Article_2578.html" target="_blank" rel="noopener">https://service.tp-link.com.cn/detail_Article_2578.html</a></p>
]]></content>
      <categories>
        <category>路由器</category>
      </categories>
      <tags>
        <tag>路由器</tag>
        <tag>虚拟服务器</tag>
        <tag>端口映射</tag>
      </tags>
  </entry>
  <entry>
    <title>NULL、0、nullptr的区别</title>
    <url>/posts/7038e29a.html</url>
    <content><![CDATA[<p><strong>非原创，觉得作者写的挺好，转自 <a href="https://www.cnblogs.com/nothx/p/8523191.html" target="_blank" rel="noopener">https://www.cnblogs.com/nothx/p/8523191.html</a></strong></p>
<p>某些时候，我们需要将指针赋值为空指针，以防止野指针。</p>
<p>有人喜欢使用NULL作为空指针常量使用，例如：int* p = NULL; 。</p>
<p>也有人直接使用0值作为空指针常量，例如：int* p = 0; 。</p>
<p>前者可能觉得：NULL作为空指针常量，名字很形象，可读性较强。</p>
<p>后者可能觉得：NULL并不是C/C++语言的关键字，而是一个在标准库头文件&lt;stddef.h&gt;中定义的宏，因此要使用NULL，可能需要直接或简介地包含&lt;stddef.h&gt;头文件，比较麻烦。</p>
<a id="more"></a>

<h1 id="问题一：NULL与常数0值有何区别？"><a href="#问题一：NULL与常数0值有何区别？" class="headerlink" title="问题一：NULL与常数0值有何区别？"></a>问题一：NULL与常数0值有何区别？</h1><p>要弄清楚这个问题，我们采用问与答的形式来描述。</p>
<p><strong>问：</strong>NULL到底是什么？</p>
<p><strong>答：</strong>NULL是一个宏。</p>
<p><strong>问：</strong>它的值是多少？</p>
<p><strong>答：</strong>C/C++标准规定：它的值是一个空指针常量（null pointer constant），由实现定义。#1,#2</p>
<p><strong>问：</strong>什么样的值才能称之为空指针常量？</p>
<p><strong>答：</strong>C语言中常数0和(void*)0都是空指针常量；C++中（暂且忽略C++11）常数0是，而(void*)0 不是。#3,#4</p>
<p><strong>问：</strong>NULL宏是在哪里定义的？</p>
<p><strong>答：</strong>通常是在C标准库的&lt;stddef.h&gt;头文件中，不过别的头文件中可能也有定义。</p>
<p><strong>问：</strong>一般编译器的&lt;stddef.h&gt;头文件中NULL宏是如何定义的？</p>
<p><strong>答：</strong>以gcc或clang编译器为例，NULL的定义大致如下（稍有简化）：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__cplusplus)</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> NULL 0    <span class="comment">// C++中使用0作为NULL的值</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> NULL ((void *)0)    <span class="comment">// C中使用((void *)0)作为NULL的值</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>问：为什么C中(void*)0是空指针常量，而C++中不是？</p>
<p>答：因为C语言中任何类型的指针都可以（隐式地）转换为 void* 型，反过来也行，而C++中 void* 型不能隐式地转换为别的类型指针（例如：int* p = (void*) 0;使用C++编译器编译会报错）。#5,#6</p>
<p>问：既然C/C++标准中，常数0都可作为空指针常量，为什么不统一使用0？</p>
<p>答：个人觉得由于(void*)0更能体现指针的意义，而常数0更多的时候是用作整数。因此，C语言中NULL定义选择了(void*)0。（仅供参考）</p>
<h1 id="问题二：C-11中为什么要引入nullptr？"><a href="#问题二：C-11中为什么要引入nullptr？" class="headerlink" title="问题二：C++11中为什么要引入nullptr？"></a>问题二：C++11中为什么要引入nullptr？</h1><p>考虑着这样一个函数重载的情形：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span>)</span> </span>&#123;&#125;     <span class="comment">// #1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">char</span>*)</span> </span>&#123;&#125;   <span class="comment">// #2</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    foo(<span class="literal">NULL</span>); <span class="comment">// 调用#1还是#2？</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从字面上来讲，NULL是个空指针常量，我们可能会觉得：既然是个指针，那么应该调用#2。但事实上调用的却是#1，因为C++中NULL扩展为常数0，它是int型。</p>
<p>根本原因就是：常数0既是整数常量，也是空指针常量。</p>
<p>为了解决这种二义性，C++11标准引入了关键字nullptr，它作为一种空指针常量。#7</p>
<p>例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span>)</span> </span>&#123;&#125;     <span class="comment">// #1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">char</span>*)</span> </span>&#123;&#125;   <span class="comment">// #2</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    foo(<span class="literal">nullptr</span>); <span class="comment">// 它会毫无异议地调用#2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p><strong>附注：</strong></p>
<p>[#1] C99: 7.17-p3:</p>
<p>  The macros are NULL which expands to an implementation-defined null pointer constant; and …</p>
<p>[#2] C++03: 18.1-p4:</p>
<p>  The macro NULL is an implementation-defined C + + null pointer constant in this International Standard(4.10).</p>
<p>[#3] C99: 6.3.2.3-p3:</p>
<p>  An integer constant expression with the value 0, or such an expression cast to type void *, is called a null pointer constant.</p>
<p>[#4] C++03: 4.10-p1:</p>
<p>  A null pointer constant is an integral constant expression (5.19) rvalue of integer type that evaluates to zero.</p>
<p>[#5] C99: 6.3.2.3-p1:</p>
<p>  A pointer to void may be converted to or from a pointer to any incomplete or object type. A pointer to any incomplete or object type may be converted to a pointer to void and back again; the result shall compare equal to the original pointer.</p>
<p>[#6] C++03: 4.10-p2:</p>
<p>  An rvalue of type “pointer to cv T,” where T is an object type, can be converted to an rvalue of type “pointer to cv void.”</p>
<p>[#7] C++11: 4.10-p1:</p>
<p>  A null pointer constant is an integral constant expression (5.19) prvalue of integer type that evaluates to zero or a prvalue of type std::nullptr_t.</p>
</blockquote>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>C</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>电信光猫TWEA-600AEM超级密码获取及桥接</title>
    <url>/posts/ea8813.html</url>
    <content><![CDATA[<p>本身比较爱折腾这些东西，非专业人士，以下步骤为参考网上的资料和实践所得，供大家参考。</p>
<p>本文主要讲述光猫（TWEA-600AEM）超级密码的获取，用超级密码登录可以对光猫进行很多高级设置，<strong>非专业人士谨慎修改，最好懂一点计算机网络知识</strong>。依据网友的经验，可以直接打电话给客服，远程修改光猫的设置。</p>
<p>如果光猫做最上游的主路由，加上光猫性能不好的话，一但下游设备多，性能吃紧，就容易卡网，甚至自动重启。本文设置了光猫桥接，让光猫只做光电信号的转换，路由器拨号，“让专业的人做专业的事”。不过现在很多光猫性能尚可，单看硬件配置甚至比一些路由器还好，没有特殊需求的话，也不建议改桥接。请参考<a href="https://www.zhihu.com/question/310217412" target="_blank" rel="noopener">https://www.zhihu.com/question/310217412</a></p>
<h1 id="登录光猫"><a href="#登录光猫" class="headerlink" title="登录光猫"></a>登录光猫</h1><p>电信给配的光猫型号是TWEA-600AEM，这个光猫只有一个千兆网口，一个百兆网口和一个USB口，一个电话插口，相比其他地区同时安装的光猫，性能不是太好。</p>
<a id="more"></a>

<p><img src="https://raw.githubusercontent.com/hanming215/ImageRepo/master/blog/20200210214658.jpg" alt=""></p>
<p>这个光猫自带无线2.4G WiFi功能，属于能用级别，最好购买个好点的路由器，还可以桥接光猫，用路由器拨号，提升性能。</p>
<p>WIFI名称默认是ChinaNet-XXXX（不同的光猫只有XXXX不同）。默认WiFi名称和WiFi密码都写在标签上，标签上还有光猫默认管理地址、默认终端配置账号和默认终端配置密码等各种信息。这里的默认终端配置账号其实就是普通管理用户，只能进入管理界面查看部分信息，修改光猫局域网地址，修改WiFi名称、密码等。</p>
<p>查看光猫底部标签，获得光猫管理IP地址和管理员用户登录密码。地址一般为<a href="http://192.168.1.1" target="_blank" rel="noopener">http://192.168.1.1</a> ，使用标签上的用户名和密码登录。</p>
<p><img src="https://raw.githubusercontent.com/hanming215/ImageRepo/master/blog/20200210214733.jpg" alt=""></p>
<p>登录后的界面如下：</p>
<p><img src="https://raw.githubusercontent.com/hanming215/ImageRepo/master/blog/20200210214747.jpg" alt=""></p>
<h1 id="超级密码、宽带密码获取"><a href="#超级密码、宽带密码获取" class="headerlink" title="超级密码、宽带密码获取"></a>超级密码、宽带密码获取</h1><p>登录后不退出，打开<a href="http://192.168.1.1/backupsettings.conf" target="_blank" rel="noopener">http://192.168.1.1/backupsettings.conf</a> 即可下载文件。访问 <a href="http://192.168.1.1/dumpcfg.conf" target="_blank" rel="noopener">http://192.168.1.1/dumpcfg.conf</a>  也可以，但是文件内容不如前者清晰。</p>
<p>下载后用文本编辑软件打开，自带的记事本等都可以，用Sublime Text 3或者Notepad++更方便。</p>
<p>网上的教程是：Ctrl+F查找telecomadmin ，一般密码是telecomadmin+8位数字。回到光猫管理页面，退出普通用户，然后用这个用户名telecomadmin，密码telecomadmin+8位数字登录光猫。如下图：</p>
<p><img src="https://raw.githubusercontent.com/hanming215/ImageRepo/master/blog/20200210214833.jpg" alt=""></p>
<p>但是文件里并没有，仔细查看文件，发现了password关键字，用来登录，成功了！编号1处是超级密码，用户名是useradmin或者telecomadmin都可以登录。编号2处光猫普通管理员密码。2个密码都是明文，可以直接登录。</p>
<p><img src="/images/aem/%E8%B6%85%E7%BA%A7%E5%AF%86%E7%A0%81.jpg" alt="超级密码"></p>
<p>登录后的界面如下，可以查看更多高级信息，非专业人士请勿修改，以免不能上网。</p>
<p><img src="https://raw.githubusercontent.com/hanming215/ImageRepo/master/blog/20200210214849.jpg" alt=""></p>
<p><del>但是很多按钮是灰色的不能点击，貌似通过删除 <code>disabled=&quot;true&quot;</code>元素来使按钮生效。我没有用过，大家谨慎修改。</del></p>
<p><img src="https://raw.githubusercontent.com/hanming215/ImageRepo/master/blog/20200210222523.jpg" alt=""></p>
<h1 id="光猫桥接、路由器拨号"><a href="#光猫桥接、路由器拨号" class="headerlink" title="光猫桥接、路由器拨号"></a>光猫桥接、路由器拨号</h1><p>是否修改光猫为用路由器拨号取决于你自己所购买的路由器，以及你光猫设备的水平，最佳实践不能一概而论。请参考知乎提问：<strong>光猫上拨号和光猫上接路由器，在路由器上拨号，哪种方式好一点？</strong><a href="https://www.zhihu.com/question/310217412" target="_blank" rel="noopener">https://www.zhihu.com/question/310217412</a> 如果还想进一步折腾请看下面的步骤。</p>
<h2 id="获取宽带密码"><a href="#获取宽带密码" class="headerlink" title="获取宽带密码"></a>获取宽带密码</h2><p>用路由器拨号需要知道宽带账号和密码，注意不是光猫管理页面中的宽带识别码。在获取超级密码的文件中继续查找，即可找到。如果你本身知道账号和密码则不用进行这一步，或者拨打客服电话核验身份信息，应该会告诉你。</p>
<p>在文件中查找<strong>INTERNET_R_VID</strong>（光猫的上网通道，后面会解释这个），即可看到<strong>Username</strong>和<strong>Password</strong>。</p>
<p><img src="/images/aem/%E4%BA%92%E8%81%94%E7%BD%91%E9%80%9A%E9%81%93.jpg" alt="base64"></p>
<p><strong>Username</strong>可以直接使用，<strong>Password</strong>是经过Base64编码后的结果，不知道或者不敢感兴趣的同学可以不用了解具体的原理。随便搜索一个Base64编解码网站即可解码成明文密码。例如：<a href="http://tool.chinaz.com/Tools/Base64.aspx" target="_blank" rel="noopener">http://tool.chinaz.com/Tools/Base64.aspx</a></p>
<p><img src="/images/aem/base64.jpg" alt="base64"></p>
<h2 id="桥接"><a href="#桥接" class="headerlink" title="桥接"></a>桥接</h2><p>用超级密码登录后，在状态总览中可以看到4个通道，可以看到具体的业务类型（作用），有上网、语音、电视等等。</p>
<p><img src="/images/aem/4%E7%A7%8D%E9%80%9A%E9%81%93.jpg" alt="4种通道"></p>
<p>4个通道作用的参考文章：</p>
<p><a href="https://wenku.baidu.com/view/340791582cc58bd63086bd09.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/340791582cc58bd63086bd09.html</a></p>
<p>不同光猫或不同地区的通道名称好像不一样，但是大同小异，理解作用就好。我们只需要修改<strong>INTERNET_R_VID_你的VlanID</strong>这个通道即可。下拉菜单选择上网通道，及图中的通道3<br><img src="/images/aem/4%E7%A7%8D%E9%80%9A%E9%81%93%E4%BF%AE%E6%94%B9.jpg" alt="修改"></p>
<p>可以看到原本的上网通道是路由方式，里面有用户名和密码，光猫用来拨号。</p>
<p><img src="/images/aem/%E8%B7%AF%E7%94%B1.jpg" alt="路由"></p>
<p>下拉菜单将路由修改为桥接，然后点击保存即可</p>
<p><img src="/images/aem/%E6%A1%A5%E6%8E%A5.jpg" alt="桥接"></p>
<h2 id="路由器拨号"><a href="#路由器拨号" class="headerlink" title="路由器拨号"></a>路由器拨号</h2><p>然后需要修改路由器的上网方式为宽带拨号方式。以前使用的是斐讯K2，刷了老毛子固件，没有时间弄远程管理，以后有时间瞅瞅。现在用的是TP<em>-</em>LINK的TL-WDR5620路由器，以这个为例。</p>
<p>填入前面获取的宽带账号和密码，点击连接即可。修改后再连接光猫的WIFI就不能上网了，但是可以进入光猫的管理界面，进行修改。</p>
<p><img src="/images/aem/%E4%BF%AE%E6%94%B9%E4%B8%8A%E7%BD%91%E6%96%B9%E5%BC%8F.jpg" alt="修改"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>利用超级密码还可以进行很多高级修改，大家可以进一步尝试，也请谨慎修改。修改桥接后，路由器的WAN IP是公网的IP，而不是光猫分配的内网IP，就可以将自己内网的一些服务发布到公网上去，让连接互联网的用户直接可以访问内部网络的服务。</p>
]]></content>
      <categories>
        <category>光猫</category>
      </categories>
      <tags>
        <tag>光猫</tag>
        <tag>路由器</tag>
        <tag>桥接</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 下基于Snort的入侵检测系统的搭建</title>
    <url>/posts/5b50df35.html</url>
    <content><![CDATA[<h1 id="Snort概览"><a href="#Snort概览" class="headerlink" title="Snort概览"></a>Snort概览</h1><p>Snort IDS（入侵检测系统）是一个强大的网络入侵检测系统。它具有实时数据流量分析和记录IP网络数据包的能力，能够进行协议分析，对网络数据包内容进行搜索、匹配。它能够检测各种不同的攻击方式，对攻击进行实时报警。此外，Snort是开源的入侵检测系统，并具有很好的扩展性和可移植性。</p>
<p>snort官网：<a href="https://www.snort.org/" target="_blank" rel="noopener">https://www.snort.org/</a></p>
<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>snort官网有很多教程，官方使用手册，不同平台的安装教程，等其他由snort社区成员编写的很多教程，都非常的详细，是非常好的参考资料，不过都是英文的。</p>
<a id="more"></a>
<p><img src="https://raw.githubusercontent.com/hanming215/ImageRepo/master/blog/20190719234643.jpg" alt=""></p>
<p>详见：<a href="https://www.snort.org/documents" target="_blank" rel="noopener">https://www.snort.org/documents</a></p>
<h1 id="安装案例"><a href="#安装案例" class="headerlink" title="安装案例"></a>安装案例</h1><p>Ubuntu 16.04下snort+barnyard2+base的入侵检测系统的搭建</p>
<p><strong>安装教程</strong></p>
<p><img src="https://raw.githubusercontent.com/hanming215/ImageRepo/master/blog/20190720001200.png" alt=""></p>
<p>作者博客：<a href="http://sublimerobots.com/" target="_blank" rel="noopener">http://sublimerobots.com/</a></p>
<p><strong>Snort</strong>：检测攻击</p>
<blockquote>
<p>Snort可以以人类可读模式将事件写入控制台或文本文件，但是比较耗费资源，效率不高，影响Snort性能。</p>
</blockquote>
<p><strong>Barnyard2</strong>：将告警信息保存到数据库</p>
<blockquote>
<p>Barnyard2是一个用于Snort unified2二进制输出文件的开源解释器，<a href="https://github.com/firnsy/barnyard2" target="_blank" rel="noopener">https://github.com/firnsy/barnyard2</a></p>
<p>将Snort事件存储在MySQL数据库中，这样我们就可以查看、搜索和查找事件。</p>
<p>为了有效地将Snort事件放入MySQL数据库，减少Snort的负载。可以使用Barnyard2。配置Snort将事件以二进制形式输出到一个文件夹中，然后让Barnyard2异步读取这些事件并将它们添加到MySQL数据库中。</p>
</blockquote>
<p><strong>BASE</strong>：<strong>snort</strong>的<strong>Web GUI</strong>，以图形界面查看告警信息更加利于对攻击分析和统计</p>
<blockquote>
<p>BASE（Basic Analysis and Security Engine ）是一个用于Snort的简单web GUI。替代产品包括Snorby、Splunk、Sguil、AlienVault OSSIM和任何syslog服务器。</p>
<p>之所以选择在本指南中使用BASE，是因为它设置简单，使用简单。BASE和Snorby都是废弃的项目，虽然Snorby提供了一个很好的Web-2.0接口，但由于它是用Ruby on Rails编写的，它所依赖的Ruby软件包不断升级，这导致了与其他所需Snorby软件包的兼容性问题，从而导致安装问题过多。</p>
</blockquote>
<p>界面如下：</p>
<p><img src="https://raw.githubusercontent.com/hanming215/ImageRepo/master/blog/20190720002416.png" alt=""></p>
]]></content>
      <categories>
        <category>信安</category>
        <category>snort</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>snort</tag>
        <tag>入侵检测</tag>
      </tags>
  </entry>
  <entry>
    <title>使用PicGo和Github搭建个人图床</title>
    <url>/posts/212aed0c.html</url>
    <content><![CDATA[<h1 id="Github设置"><a href="#Github设置" class="headerlink" title="Github设置"></a>Github设置</h1><ol>
<li><p>注册github账号，新建一个保存图片的仓库</p>
</li>
<li><p>生成一个token用于PicGo操作你的仓库</p>
</li>
<li><p>在github-&gt;setting-&gt;developer settings 选择generate new token</p>
<p>或直接访问：<a href="https://github.com/settings/tokens" target="_blank" rel="noopener">https://github.com/settings/tokens</a></p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/hanming215/ImageRepo/master/blog/20190717072230.png" alt=""></p>
<p>​        把repo的勾打上即可。然后翻到页面最底部，点击<code>Generate token</code>的绿色按钮生成token。</p>
<a id="more"></a>

<p><img src="https://raw.githubusercontent.com/hanming215/ImageRepo/master/blog/20190717072411.png" alt=""></p>
<p>​    <strong>注意：</strong>这个token生成后只会显示一次！你要把这个token复制一下存到其他地方以备以后要用。</p>
<h1 id="配置PicGo"><a href="#配置PicGo" class="headerlink" title="配置PicGo"></a>配置PicGo</h1><ol>
<li><p>下载安装对应版本的PicGo</p>
<p>下载地址：<a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo/releases</a></p>
</li>
<li><p>设置PicGO</p>
<p>仓库名的格式是<code>用户名/仓库</code>，比如我创建了一个叫做<code>test</code>的仓库，在PicGo里我要设定的仓库名就是<code>用户名/test</code>。一般我们选择<code>master</code>分支即可，然后粘贴Github生成的token。也可以在仓库下指定<code>blog</code>路径，PicGo可以自动新建<code>blog</code>目录，然后记得点击确定以生效，然后可以点击设为默认图床来确保上传的图床是GitHub。</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/hanming215/ImageRepo/master/blog/20190717073716.png" alt=""></p>
<p>当你上传的时候，你会发现你的仓库里也会增加新的图片了，图片链接自动保存在剪贴板，粘贴即可使用。</p>
<p><img src="https://raw.githubusercontent.com/hanming215/ImageRepo/master/blog/20190717074533.png" alt=""></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>博客</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建</title>
    <url>/posts/b8f4bd70.html</url>
    <content><![CDATA[<h1 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h1><ol>
<li><p>安装 Node</p>
</li>
<li><p>安装 Git</p>
</li>
<li><p>安装 Hexo</p>
</li>
</ol>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
<p>出现下图表示安装成功</p>
<p><img src="https://raw.githubusercontent.com/hanming215/ImageRepo/master/blog/20200326231357.jpg" alt=""></p>
<h1 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h1><h2 id="初始化-hexo"><a href="#初始化-hexo" class="headerlink" title="初始化 hexo"></a>初始化 hexo</h2><ul>
<li><p>新建一个空白文件夹（下文提到的“项目根目录”是指你新建的文件夹的位置）用于存放 hexo 资源。在空白文件夹里面打开 Git Bash ，输入下列命令行进行初始化，初始化成功后会在文件夹生成如下图的文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><img src="https://raw.githubusercontent.com/hanming215/ImageRepo/master/blog/20200326231433.jpg" alt=""></p>
<p><img src="https://raw.githubusercontent.com/hanming215/ImageRepo/master/blog/20200326231458.jpg" alt=""></p>
<h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>打开Next主题路径下的配置文件<code>_config.yml</code>修改下列代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># Canvas-nest</span><br><span class="line"></span><br><span class="line"># Dependencies: https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;theme-next-canvas-nest</span><br><span class="line"># For more information: https:&#x2F;&#x2F;github.com&#x2F;hustcc&#x2F;canvas-nest.js</span><br><span class="line">canvas_nest:</span><br><span class="line">  enable: true</span><br><span class="line">  onmobile: true # Display on mobile or not</span><br><span class="line">  color: &quot;0,0,255&quot; # RGB values, use &#96;,&#96; to separate</span><br><span class="line">  opacity: 0.5 # The opacity of line: 0~1</span><br><span class="line">  zIndex: -1 # z-index property of the background</span><br><span class="line">  count: 99 # The number of lines</span><br></pre></td></tr></table></figure>

<ol>
<li><p><strong>注</strong>：</p>
<ul>
<li><p>hexo相关命令均在<strong>站点目录</strong>下，用<strong>Git Bash</strong>运行。</p>
</li>
<li><p>站点配置文件：站点目录下的<code>_config.yml</code>。</p>
<p>路径为<code>&lt;folder&gt;\_config.yml</code></p>
</li>
<li><p>主题配置文件：站点目录下的<code>themes</code>文件夹下的，主题文件夹下的<code>_config.yml</code>。</p>
<p>路径为<code>&lt;folder&gt;\themes\&lt;主题文件夹&gt;\_config.yml</code></p>
</li>
</ul>
</li>
<li><p>启动服务器。在路径下，命令行（即Git Bash）输入以下命令，运行即可：</p>
<blockquote>
<p>hexo server</p>
</blockquote>
</li>
<li><p>浏览器访问网址： <code>http://localhost:4000/</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
